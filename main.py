from list_tokens import token_tg, token_wm
from status_weather import ids
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup
from aiogram.dispatcher.filters import Text

import logging
import time
import requests
import datetime

api_token = token_tg

logging.basicConfig(level=logging.INFO)

bot = Bot(token=api_token)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_start(message: types.Message):
    text = ('–ü—Ä–∏–≤–µ—Ç–∏–∫ {0.first_name} ‚ò∫Ô∏è\n\n'
            '–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n\n'
            '‚¨áÔ∏è –ñ–º–∞–∫–∞–π, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è')

    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    but_info = 'Info'
    but_ver = 'Update'

    markup.add(but_info, but_ver)

    await message.answer(text.format(message.from_user), reply_markup=markup)


@dp.message_handler(Text(equals='Info'))
async def mes_info(message: types.Message):
    txt = ('üó∫Ô∏è <b>Weather Bot v.: 1.1</b>\n\n'
           '‚ÑπÔ∏è –ë–æ—Ç –∏—â–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏ –≤—ã–¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.\n\n'
           '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: Rus, Eng\n\n'
           '‚ö†Ô∏è –û–±–æ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏–ª–∏ –±–∞–≥–∞—Ö –ø–∏—à–∏—Ç–µ, —É—á—Ç—É, –∏—Å–ø—Ä–∞–≤–ª—é ‚ò∫\n\n'
           'üßë‚Äçüíª –í–ª–∞–¥–∏–º–∏—Ä: t.me/vlad_prin')
    await message.answer(txt, parse_mode=types.ParseMode.HTML)


@dp.message_handler(Text(equals='Update'))
async def mes_update(message: types.Message):
    txt = ('ü§ñ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ —Ñ–∏–∫—Å–æ–≤:\n\n'
           '1Ô∏è‚É£ –ë–æ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –ø–æ–¥ –¥—Ä—É–≥—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É telegram_bot_api\n'
           '2Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–±–ª–∞—á–Ω–æ, –¥–æ–∂–¥—å –∏ —Ç.–¥.)\n'
           '3Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–∫–µ—Ä-–ø–ª–∞–Ω–µ—Ç–∞ –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏\n\n'
           'üó∫Ô∏è <b>Weather Bot v.: 1.1</b>'
           )
    await message.answer(txt, parse_mode=types.ParseMode.HTML)


@dp.message_handler()
async def weather(message: types.Message):
    await message.reply('üîç –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ–∏—Å–∫')

    # –∑–∞–±–∏—Ä–∞–µ–º —Å–º—Å
    cities = message.text

    # –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    res_c = requests.get(f'http://api.openweathermap.org/geo/1.0/direct?q={cities}&limit=3&appid={token_wm}')
    date_c = res_c.json()

    # –∑–∞–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    lat = date_c[0]['lat']
    lon = date_c[0]['lon']

    # –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
    res = requests.get(
        f'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={token_wm}&units=metric')
    data = res.json()

    # –∑–∞–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    # —Å—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥
    country = data['sys']['country']
    city = data['name']

    # –≤—Ä–µ–º—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
    sun_rise = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
    sun_set = datetime.datetime.fromtimestamp(data['sys']['sunset'])
    day = sun_set - sun_rise

    # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    temp = data['main']['temp']  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    pres = data['main']['pressure']  # –¥–∞–≤–ª–µ–Ω–∏–µ
    humd = data['main']['humidity']  # –≤–ª–∞–∂–Ω–æ—Å—Ç—å
    wind = data['wind']['speed']
    weat = data['weather'][0]['id']
    status = ids[weat]

    # –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    date = datetime.datetime.today()
    t_me = date.strftime('%H:%M')

    # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–∫–µ—Ä-–ø–ª–∞–Ω–µ—Ç–∞
    if 0 < lon < 120:
        p = 'üåé'
    elif 121 < lon < 240:
        p = 'üåé'
    else:
        p = 'üåç'

    time.sleep(1)

    # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É
    txt = (f'üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞: {t_me}\n\n'
           f'üèôÔ∏è {country} | {city}\n'
           f'{p} {round(lat, 4)} —Å. —à. {round(lon, 4)} –≤. –¥.\n\n'
           f'ü™Å –°—Ç–∞—Ç—É—Å –ø–æ–≥–æ–¥—ã: {status}\n\n'
           f'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ¬∞C\n'
           f'‚¨áÔ∏è –î–∞–≤–ª–µ–Ω–∏–µ: {pres} –º–º. —Ä—Ç. —Å—Ç.\n'
           f'üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humd} %\n'
           f'üí® –í–µ—Ç–µ—Ä –º/—Å: {wind}\n\n'
           f'üåá –í–æ—Å—Ö–æ–¥: {sun_rise}\n'
           f'üåÜ –ó–∞–∫–∞—Ç: {sun_set}\n\n'
           f'üïï –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {day}')

    await message.answer(txt)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
